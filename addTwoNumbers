# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

#Originally I was going to use loops, but after some consideration
#I think that using recursion might be the better solution


class Solution:
    #'of' stands for 'overflow'
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode], of = 0) -> Optional[ListNode]:
        
        retVal = ListNode()
        
        if(l1 != None and l2 != None):
            temp = l1.val + l2.val + of
            overflow = 0
            
            if(temp >= 10):
                temp -= 10
                overflow = 1
                
            
            retVal.val = temp
                        
            retVal.next = self.addTwoNumbers(l1.next, l2.next, overflow)
            
    #TODO make it so different length numbers can be added, also fix [0] + [0] edge case
            
   
        
        return retVal
